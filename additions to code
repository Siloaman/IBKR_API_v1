# Sample data structure
trades = [
    {
        'contract': {'symbol': 'DRUG'},
        'order': {'lmtPrice': 0.0155}
    },
    {
        'contract': {'symbol': 'CERO'},
        'order': {'lmtPrice': 0.0155}
    },
    {
        'contract': {'symbol': 'TEST'},
        'order': {'lmtPrice': 0.0200}
    }
]

# List to hold symbols with lmtPrice == 0.0155
matching_symbols = []

# Iterate through the trades
for trade in trades:
    if trade['order']['lmtPrice'] == 0.0155:
        matching_symbols.append(trade['contract']['symbol'])

print(matching_symbols)

===========================================================================================================
pseudo

for symbols in matching_symbols:
    contract = (symbols, "smart", "usd")        # use SCANNERS to input new data so i don't disrupt the api running with my phone!!!!

    bars = ib.reqHistoricalData ( ... 5 mins ... )

bars.updateEvent += onBarUpdate

Stop-loss orders
Automatically sell a security when it reaches a specified price. However, if the price gaps above the stop price, the order will trigger and the stock will be sold at the next available price. 


[ trade logic ]

keep looping throughout day

===========================================================================================================

contract = Forex('EURUSD')

bars = ib.reqHistoricalData(            # so if i am asking for historical data by every 5 mins, and it replots with last bar change, this SHOULD align with changes that happen at 9:55, 10:00, 10:05, etc ???
        contract,
        endDateTime='',
        durationStr='900 S',
        barSizeSetting='10 secs',
        whatToShow='MIDPOINT',
        useRTH=True,
        formatDate=1,
        keepUpToDate=True)
Replot for every change of the last bar:

from IPython.display import display, clear_output
import matplotlib.pyplot as plt

def onBarUpdate(bars, hasNewBar):
    plt.close()
    plot = util.barplot(bars)
    clear_output(wait=True)
    display(plot)

bars.updateEvent += onBarUpdate

ib.sleep(10)
ib.cancelHistoricalData(bars)
