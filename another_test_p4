flat_grouped_nov_dec = [
    [5,6,9,3], [4,2,5,0], [9,3,6,3], [7,8,6,5], [7,7,2,6], [0,3,4,0],
    [7,9,8,1], [7,5,0,7], [2,9,5,9], [9,0,0,7], [9,6,0,4], [7,6,6,2],
    [8,2,5,9], [6,6,6,1], [5,4,1,1], [3,0,4,7], [3,0,1,4], [0,8,6,5],
    [8,2,0,5], [1,8,0,5], [1,7,4,7], [7,9,3,0], [7,0,6,8], [8,2,2,1],
    [0,4,4,4], [9,3,5,8], [1,9,9,1], [4,6,3,9], [0,1,1,6], [8,7,7,4],
    [4,5,1,0], [7,7,4,6], [0,3,8,7], [7,5,3,0], [4,2,3,8], [9,9,5,9],
    [6,8,3,0], [7,1,8,3], [3,2,1,1], [1,5,7,5], [7,8,4,7], [9,7,3,8],
    [4,6,6,9], [8,9,7,8], [5,4,2,4], [9,5,5,9], [1,6,0,9], [1,9,4,5],
    [8,8,3,7], [5,0,0,0], [7,5,5,2], [3,2,3,9], [7,8,9,2], [9,3,4,1],
    [0,1,2,4], [6,9,1,6], [5,7,0,2], [7,0,1,8], [9,7,5,9], [7,3,6,2],
    [1,2,9,7], [6,3,8,4], [6,1,0,8], [2,4,7,4], [9,2,8,7], [4,6,1,8],
    [9,9,6,9], [7,3,7,3], [0,4,0,3], [5,2,2,2], [6,8,8,8], [0,0,8,8],
    [2,0,4,6], [3,9,6,3], [5,0,4,2], [9,8,0,0], [4,4,0,8], [6,0,7,0],
    [9,1,9,8], [7,9,5,1], [7,6,4,8], [4,9,0,9], [5,5,5,9], [7,0,9,6],
    [0,4,7,8], [6,0,5,3], [1,9,4,9], [3,4,6,8], [6,2,1,1], [1,5,6,6],
    [3,6,4,3], [1,4,0,5], [9,1,1,5], [6,9,2,2], [3,3,6,2], [5,6,6,6],
    [6,0,4,7], [3,7,5,0], [7,6,1,1], [4,8,1,0], [8,0,9,2], [2,7,2,7],
    [5,9,4,7], [6,4,5,8], [9,4,7,9], [8,3,9,2], [1,6,2,5], [3,1,6,2],
    [9,0,0,5], [3,6,1,2], [0,4,5,7], [7,5,2,0], [9,5,0,5], [1,3,6,9],
    [3,6,3,1], [1,8,7,4], [6,6,3,8], [8,0,8,5], [2,1,0,8], [9,5,2,1],
    [6,4,2,1], [8,7,1,7]
]    

specs = [
    [3, 3, 6, 9],
    [3, 3, 9, 6],
    [3, 6, 3, 9],
    [3, 6, 9, 3],
    [3, 9, 3, 6],
    [3, 9, 6, 3],
    [6, 3, 3, 9],
    [6, 3, 9, 3],
    [6, 9, 3, 3],
    [9, 3, 3, 6],
    [9, 3, 6, 3],
    [9, 6, 3, 3]
]

def apply_spec_to_fg(fg_row, spec):
    """Apply spec digit-by-digit to one f_g row."""
    result = []
    for f, s in zip(fg_row, spec):
        val = f + s
        if val >= 10:
            val -= 10
        result.append(val)
    return result

def generate_rows(curr_win, spec, iterations=9):
    """Generate rows by applying spec step-by-step for given f_g row."""
    rows = []
    current = curr_win[:]
    for _ in range(iterations):
        current = apply_spec_to_fg(current, spec)
        rows.append(current)
    return rows


# Group results per spec
all_results = {}

for spec in specs:  # do all f_g rows for this spec before moving on
    spec_key = ''.join(str(x) for x in spec)
    all_results[spec_key] = {}

    for curr_up in flat_grouped_nov_dec:
        start_key = ''.join(str(x) for x in curr_up)
        result_rows = generate_rows(curr_up, spec)
        all_results[spec_key][start_key] = result_rows


# Example: printing nicely
for spec, fg_data in all_results.items():
    print(f"\nSpec: {spec}")
    for fg, rows in fg_data.items():
        print(f"  Start f_g: {fg}")
        for row in rows:
            print("   ", row)
