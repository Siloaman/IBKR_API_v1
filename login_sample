pip install ib_insync

from ib_insync import *
# https://ib-insync.readthedocs.io/

util.startLoop()  # only use in interactive environments (i.e. Jupyter Notebooks)
# https://algotrading101.com/learn/ib_insync-interactive-brokers-api-guide/

ib = IB()
ib.connect(host='127.0.0.1', port=7496, clientId=1)
# https://www.elitetrader.com/et/threads/cant-connect-to-api-interactive-brokers.361205/
# needed to change socket port to 7496 and uncheck the Read-Only API box

# for this to work, Market Data Subscriber Status needs to be updated for a subscription

nflx_contract = Stock('NFLX', 'SMART', 'USD')     # netflix ticker, 'smart' search for routing exchange, currency of ticker

ib.qualifyContracts(nflx_contract)

data = ib.reqMktData(nflx_contract)        # grab all details into 'data'
data.marketPrice()                        # use a piece of the requested market data

# Retrieving Historical Data

historical_data_nflx = ib.reqHistoricalData(
    nflx_contract, 
    '', 
    barSizeSetting='15 mins', 
    durationStr='2 D', 
    whatToShow='MIDPOINT', 
    useRTH=True
    )

historical_data_nflx[-1]      #  access the most recent candle, just like any other Python list, by using a negative index.
# https://www.interactivebrokers.com/campus/ibkr-api-page/market-data-subscriptions/
historical_data_nflx[-1].open

# buy Netflix
nflx_order = MarketOrder('BUY', 200)
trade = ib.placeOrder(nflx_contract, nflx_order)    # we have created a contract, an order and then submitted through placeOrder function
trade.log
trade.orderStatus.status

for _ in range(100):
    if not trade.isActive():
        print(f'Your order status - {trade.orderStatus.status}')
        break
    time.sleep(0.5)
else:
    print('Order is still active')

# The above code will check if the trade is no longer active. If so, it will break out of the loop and exit. Otherwise, it will sleep for half a second and check again.

nflx_bracket_order = ib.bracketOrder(
    'BUY',
    100,
    limitPrice=1.19,
    takeProfitPrice=1.20,
    stopLossPrice=1.18
)

for ord in nflx_bracket_order:
    ib.placeOrder(nflx_order, ord)


# Run indefinitely
ib.run()

def place_order(direction, qty, df, tp, sl):
    bracket_order = ib.bracketOrder(
        direction,
        qty,
        limitPrice=df.close.iloc[-1],
        takeProfitPrice=tp,
        stopLossPrice=sl,
    )

    for ord in bracket_order:
        ib.placeOrder(contract, ord)


def on_new_bar(bars: BarDataList, has_new_bar: bool):
    if has_new_bar:
        df = util.df(data)
        sma = df.close.tail(50).mean()
        std_dev = df.close.tail(50).std() * 3

        # Check if we are in a trade
        if contract not in [i.contract for i in ib.positions()]:
            # We are not in a trade - Look for a signal

            if df.close.iloc[-1] > sma + std_dev:
                # Trading more than 3 standard deviations above average - SELL
                place_order('SELL', 1, df, sma, sma + std_dev * 2)

            elif df.close.iloc[-1] < sma - std_dev:
                # Trading more than 3 standard deviations below average - BUY
                place_order('BUY', 1, df, sma, sma=std_dev * 2)
