from ib_async import *
util.startLoop()

ib = IB()
ib.connect('127.0.0.1', 7497, clientId=0)

# GRAB APPROPRIATE SYMBOLS

sub = ScannerSubscription(
    instrument='STK', 
    locationCode='STK.NASDAQ',        # 'STK.US.MAJOR', 
    scanCode='TOP_PERC_GAIN')

tagValues = [
    TagValue("changePercAbove", "30"),
    TagValue('usdVolumeAbove', 0.10),
    TagValue('priceBelow', 10)]

# the tagValues are given as 3rd argument; the 2nd argument must always be an empty list
# (IB has not documented the 2nd argument and it's not clear what it does)
scanData = ib.reqScannerData(sub, [], tagValues)

symbols = [sd.contractDetails.contract.symbol for sd in scanData]
print(symbols)

for symbol in symbols:
    qualify(symbol)

# CREATE CONTRACTS FOR SAID SYMBOLS

contracts = [Forex(pair) for pair in ('EURUSD', 'USDJPY', 'GBPUSD', 'USDCHF', 'USDCAD', 'AUDUSD')]
ib.qualifyContracts(*contracts)

for contract in contracts:
    ib.reqMktData(contract, '', False, False)

# TRACK THE CONTRACTS / OR JUST MAKE SPLIT SECOND DECISIONS BASED ON WHAT THE DATA SAYS NOW.


contract = Stock('TSLA', 'SMART', 'USD')

ib.reqHeadTimeStamp(contract, whatToShow='TRADES', useRTH=True)
datetime.datetime(2010, 6, 29, 8, 0)
To request hourly data of the last 60 trading days:

bars = ib.reqHistoricalData(
        contract,
        endDateTime='',
        durationStr='60 D',
        barSizeSetting='1 hour',
        whatToShow='TRADES',
        useRTH=True,
        formatDate=1)
bars[0]
BarData(date=datetime.datetime(2019, 10, 4, 15, 30), open=231.82, high=234.78, low=230.29, close=233.06, volume=12066, average=232.914, barCount=5981)

# get average range of previous 2 bars leading up to PM, and also average range of last 6 bars up to PM.
# if we came out of downtrend, we want 2-4 bars of SY consolidation
# if we just have consolidation at SY we should know the ranges average to determine true PM

OPEN, HIGH, LOW, CLOSE
0.32, 0.41, 0.32, 0.37
0.37, 0.43, 0.36, 0.42
0.42, 0.43, 0.32, 0.38
0.38, 0.51, 0.36, 0.50
0.50, 0.98, 0.48, 0.87

Here's the Python code to create a DataFrame from the given data:

python
Copy code
import pandas as pd

# Data
data = {
    "OPEN": [0.32, 0.37, 0.42, 0.38, 0.50],
    "HIGH": [0.41, 0.43, 0.43, 0.51, 0.98],
    "LOW": [0.32, 0.36, 0.32, 0.36, 0.48],
    "CLOSE": [0.37, 0.42, 0.38, 0.50, 0.87],
}

# Create DataFrame
df = pd.DataFrame(data)

# Display the DataFrame
print(df)


To access the entire first row:
python
Copy code
first_row = df.loc[0]
print(first_row)

To get the CLOSE value of the first row:

python
Copy code
close_value_first_row = df.loc[0, "CLOSE"]
print(close_value_first_row)  # Output: 0.37
To get the HIGH value of the third row:

python
Copy code
high_value_third_row = df.loc[2, "HIGH"]
print(high_value_third_row)  # Output: 0.43



o calculate the mean range of the values in the DataFrame (excluding the last line), the range is defined as the difference between the HIGH and LOW for each row. Here's how you can calculate it:

Python Code
python
Copy code
# Exclude the last row
df_subset = df.iloc[:-1]

# Calculate the range (HIGH - LOW) for each row
df_subset["RANGE"] = df_subset["HIGH"] - df_subset["LOW"]

# Calculate the mean range
mean_range = df_subset["RANGE"].mean()

print(f"Mean Range (excluding last line): {mean_range}")



Hereâ€™s the Python code used to calculate the range of the last line and the percentage difference:

python
Copy code
# Calculate the range for the last row
last_row_range = df.iloc[-1]["HIGH"] - df.iloc[-1]["LOW"]

# Calculate the percentage difference between the mean range and the last row range
percentage_difference = ((last_row_range - mean_range) / mean_range) * 100

print(f"Range of the last line: {last_row_range}")
print(f"Percentage difference: {percentage_difference}%")

# question: when we get historical bars (say last 5), do we get last 5 fully formed, or last 4 FF and the 5th currently forming in minute 4?

# track changing tickers every 30 seconds and update values
ib.pendingTickersEvent += onPendingTickers
ib.sleep(30)
ib.pendingTickersEvent -= onPendingTickers

# SET UP BRACKETED ORDERS (BASED ON POSITIVE MOVEMENT)

be sure that once a stock has been bought, the stock is no longer in play to be rebought and rebought in microseconds after one another!!!

# LOG DATA FOR REVIEW

# LOOP THROUGHOUT DAYTIME

# Run infinitely
ib.run()

if trade.orderStatus.status == 'Filled':
        ib.disconnect()
        quit(0)
